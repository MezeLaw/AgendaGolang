// Code generated by MockGen. DO NOT EDIT.
// Source: agenda.go

// Package servicio is a generated GoMock package.
package servicio

import (
	modelos "agenda/modelos"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServicioDeLaAgenda is a mock of ServicioDeLaAgenda interface.
type MockServicioDeLaAgenda struct {
	ctrl     *gomock.Controller
	recorder *MockServicioDeLaAgendaMockRecorder
}

// MockServicioDeLaAgendaMockRecorder is the mock recorder for MockServicioDeLaAgenda.
type MockServicioDeLaAgendaMockRecorder struct {
	mock *MockServicioDeLaAgenda
}

// NewMockServicioDeLaAgenda creates a new mock instance.
func NewMockServicioDeLaAgenda(ctrl *gomock.Controller) *MockServicioDeLaAgenda {
	mock := &MockServicioDeLaAgenda{ctrl: ctrl}
	mock.recorder = &MockServicioDeLaAgendaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicioDeLaAgenda) EXPECT() *MockServicioDeLaAgendaMockRecorder {
	return m.recorder
}

// AgregarContacto mocks base method.
func (m *MockServicioDeLaAgenda) AgregarContacto(contacto modelos.Contacto) (*modelos.Contacto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgregarContacto", contacto)
	ret0, _ := ret[0].(*modelos.Contacto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgregarContacto indicates an expected call of AgregarContacto.
func (mr *MockServicioDeLaAgendaMockRecorder) AgregarContacto(contacto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgregarContacto", reflect.TypeOf((*MockServicioDeLaAgenda)(nil).AgregarContacto), contacto)
}

// ConsultarContato mocks base method.
func (m *MockServicioDeLaAgenda) ConsultarContato(dni string) (*modelos.Contacto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsultarContato", dni)
	ret0, _ := ret[0].(*modelos.Contacto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsultarContato indicates an expected call of ConsultarContato.
func (mr *MockServicioDeLaAgendaMockRecorder) ConsultarContato(dni interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsultarContato", reflect.TypeOf((*MockServicioDeLaAgenda)(nil).ConsultarContato), dni)
}

// EliminarContacto mocks base method.
func (m *MockServicioDeLaAgenda) EliminarContacto(dni string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EliminarContacto", dni)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EliminarContacto indicates an expected call of EliminarContacto.
func (mr *MockServicioDeLaAgendaMockRecorder) EliminarContacto(dni interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EliminarContacto", reflect.TypeOf((*MockServicioDeLaAgenda)(nil).EliminarContacto), dni)
}
